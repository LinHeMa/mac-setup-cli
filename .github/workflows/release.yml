# .github/workflows/release.yml

# Name of the workflow
name: Build and Release

# Events that trigger this workflow
on:
  # 1. When code is pushed to the main branch or tags matching v*.*.*
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  # 2. When a Pull Request targets the main branch
  pull_request:
    branches:
      - main

# Jobs executed by the workflow
jobs:
  # Define a job named build-and-release
  build-and-release:
    # Specify the OS for this job; must be macos for macOS tools
    runs-on: macos-latest

    # Steps in this job
    steps:
      # Step 1: Checkout source code
      # Use the official checkout action to download repository code to the runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Rust toolchain
      # Use a community-recommended action to install stable Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Set up cache
      # Cache cargo dependencies to speed up build process
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Step 4: Install and start Docker (for testing)
      - name: Install and start Docker
        run: |
          # Install Docker Desktop using Homebrew Cask
          brew install --cask docker

          # Start Docker app. '--background' and '--hide' ensure it runs in the background
          open --background -a Docker

          # Wait for Docker service to be fully ready
          echo "Waiting for Docker daemon to start..."
          while ! docker system info > /dev/null 2>&1; do
            sleep 2
          done
          echo "Docker daemon is ready!"

      # Step 5: Run code style check (Linter)
      # -- -D warnings treats all warnings as errors to enforce high code quality
      - name: Run linter (Clippy)
        run: cargo clippy -- -D warnings

      # Step 6: Run tests
      - name: Run tests
        run: cargo test --verbose

      # Step 7: Build release binary
      - name: Build release binary
        run: cargo build --release --verbose

      # Step 8: Package release assets (only on tag push)
      # 'if' ensures this and the next step only run on tag events
      - name: Package release assets
        if: startsWith(github.ref, 'refs/tags/')
        run: zip -j mac-setup-cli.zip target/release/mac-setup-cli

      # Step 9: Create GitHub Release (only on tag push)
      # Use a popular community action to automatically create a Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # Upload the packaged zip file
          files: mac-setup-cli.zip
          # GITHUB_TOKEN is automatically provided by GitHub Actions
          # It has permission to create Releases in the repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
