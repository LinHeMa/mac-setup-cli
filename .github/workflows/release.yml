# .github/workflows/release.yml

# Name of the workflow
name: Build and Release

# Events that trigger this workflow
on:
  # 1. When code is pushed to the main branch or tags matching v*.*.*
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  # 2. When a Pull Request targets the main branch
  pull_request:
    branches:
      - main

# Jobs executed by the workflow
jobs:
  # Define a job named build-and-release
  build-and-release:
    # Specify the OS for this job; must be macos for macOS tools
    runs-on: macos-latest

    # Steps in this job
    steps:
      # Step 1: Checkout source code
      # Use the official checkout action to download repository code to the runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Rust toolchain
      # Use a community-recommended action to install stable Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Set up cache
      # Cache cargo dependencies to speed up build process
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # 步驟 4: 執行程式碼風格檢查 (Linter)
      # -- -D warnings 會將所有警告視為錯誤，強制維持高程式碼品質
      - name: Run linter (Clippy)
        run: cargo clippy --all-features -- -D warnings

      # 步驟 5: 執行測試 (預設跳過 Docker 測試)
      - name: Run tests (exclude docker tests)
        run: |
          # 為了讓測試能夠找到 nvm，我們需要手動安裝並 source 它。
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # 為測試準備環境：安裝一個 LTS 版本的 Node.js
          nvm install --lts
          
          # 現在，環境已準備就緒，我們可以執行測試了
          cargo test --verbose

      # 步驟 6: 編譯 Release 版本的執行檔
      - name: Build release binary
        run: cargo build --release --verbose

      # 步驟 7: 打包執行檔 (僅在推送標籤時執行)
      # 'if' 條件句確保這一步和下一步只在觸發事件是標籤時才會運行
      - name: Package release assets
        if: startsWith(github.ref, 'refs/tags/')
        run: zip -j mac-setup-cli.zip target/release/mac-setup-cli

      # 步驟 8: 建立 GitHub Release (僅在推送標籤時執行)
      # 使用社群廣受好評的 action 來自動建立 Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # 將打包好的 zip 檔案上傳
          files: mac-setup-cli.zip
          # GITHUB_TOKEN 是由 GitHub Actions 自動提供的，不需要手動設定
          # 它有權限可以代表您在儲存庫中建立 Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
